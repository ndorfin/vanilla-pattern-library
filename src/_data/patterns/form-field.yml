id: form-field
name: Form field
scope: atom
summary: Allows a user to add information via form controls
description: |-
  Allows a user to add information via form controls
design_link: https://www.figma.com/design/mvalf0TtRnGrKABAc0JD5Y/VANILLA-Design-System?node-id=1128-270&m=dev
assets:
  - /css/patterns/form_field.css
tests:
  - form-fields
example:
  width: 400
  height: 75
  code: |-
    <div class="form_field">
      <input type="text" required>
    </div>
notes: |-
  - Inputs can cater for many different types of input (See the variants below)
  - All form fields are considered required by default and must use the `required` attribute. If a field is not required, remove the `required` attribute, and label the field as optional.
  - When capturing known numeric patterns such as Credit Cards, ID numbers, etc. use the `inputmode="numeric"` attribute combined with the `pattern="…"` attribute.
  - Don't forget to add `autocomplete` attributes and their associated values. See [MDN: `autocomplete`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
  - Avoid using any of the button-like input types (`<input type="button|image|reset|submit">`). Use `<button>` elements instead.
  - If you want to accept multi-line text input, use a `<textarea></textarea>` rather than a text input.
  - After validation, if the field is invalid, you **must** use the `aria-invalid="true"` attribute. See [form rows](../form-row) for more error/success details.
variants:
  -
    id: placeholder
    name: Placeholder
    description: |-
      Give the user a helpful example
    notes: |-
      This attribute **must not** be used as a replacement for the field's associated `<label>`.
    example:
      code: |-
        <div class="form_field">
          <input type="text" placeholder="e.g. Jesse Brown" required>
        </div>
  -
    id: optional
    name: Optional field
    description: |-
      Some fields will be treated as optional.
    notes: |-
      Note the lack of a `required` attribute.
    example:
      code: |-
        <div class="form_field">
          <input type="text" placeholder="e.g. Jesse Brown">
        </div>
  -
    id: type-date
    name: 'Type: date'
    description: |-
      Date entry with free validation!
    # notes: |-
    example:
      code: |-
        <div class="form_field">
          <input type="date" required>
        </div>
  -
    id: type-email
    name: 'Type: email'
    description: |-
      Email address entry with free validation!
    # notes: |-
    example:
      code: |-
        <div class="form_field">
          <input type="email" autocomplete="email" required>
        </div>
  -
    id: type-file
    name: 'Type: file'
    description: |-
      File uploads, and capturing photos / camera inputs.
    notes: |-
      - If you want to use this input type, then your associated `<form>` **must** include the following attribute: `enctype="multipart/form-data"`
      - Use the [`accept` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept) to specify what types of files are allowed
    example:
      code: |-
        <div class="form_field">
          <input type="file" required>
        </div>
  -
    id: type-number
    name: 'Type: number'
    description: |-
      Numbers such as integers and decimals.
    notes: |-
      - This input type can only be used for true numbers, such as integers, decimals, etc.
      - **Don’t** use this input type for values such as Credit Cards, ID numbers, etc.
      - Use the `max`, `min`, `step` if those values are known or predictable.
    example:
      code: |-
        <div class="form_field">
          <input type="number" required>
        </div>
  -
    id: type-password
    name: 'Type: password'
    description: |-
      Input masking when entering sensitive information
    notes: |-
      The example below is for a log-in prompt. If you instead want to capture a user's password during registration, use the appropriate alternative `autocomplete` value.
    example:
      code: |-
        <div class="form_field">
          <input name="password" type="password" autocomplete="current-password" required>
        </div>
  -
    id: type-search
    name: 'Type: search'
    description: |-
      Use this input type when creating search forms
    # notes: |-
    example:
      code: |-
        <div class="form_field">
          <input type="search" required>
        </div>
  -
    id: type-tel
    name: 'Type: tel'
    description: |-
      Phone number input with free validation!
    # notes: |-
    example:
      code: |-
        <div class="form_field">
          <input type="tel" required>
        </div>
  -
    id: type-number-like
    name: 'Type: number-like'
    description: |-
      Numeric input, but not a number
    notes: |-
      Details on the gov.uk blog about [capturing credit card numbers](https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/)
    example:
      code: |-
        <div class="form_field">
          <input type="text" pattern="[0-9]*" inputmode="numeric" required>
        </div>
  -
    id: type-url
    name: 'Type: URL'
    description: |-
      Capture online addresses and other <abbr title="Uniform Resource Locator">URL</abbr>s with `type="url"`.
    # notes: |-
    example:
      code: |-
        <div class="form_field">
          <input type="url" required>
        </div>
  -
    id: checkboxes
    name: Checkboxes
    description: |-
      If you want the user to select one (or more) from five (or less) items, then use a group of checkboxes
    notes: |-
      - Use the same `name` attribute value for each checkbox so they're grouped logically
    example:
      height: 200
      code: |-
        <div class="form_field">
          <ul>
            <li>
              <label>
                <input type="checkbox" name="fruit" value="apples">
                <span>
                  Apples
                </span>
              </label>
            </li>
            <li>
              <label>
                <input type="checkbox" name="fruit" value="bananas">
                <span>
                  Bananas
                </span>
              </label>
            </li>
            <li>
              <label>
                <input type="checkbox" name="fruit" value="peaches">
                <span>
                  Peaches
                </span>
              </label>
            </li>
          </ul>
        </div>
  -
    id: radios
    name: Radios
    description: |-
      If you want the user to select at most one from five or less items, then use a group of radio buttons
    notes: |-
      - Use the same `name` attribute value for each radio button so they're grouped logically
    example:
      height: 200
      code: |-
        <div class="form_field">
          <ul>
            <li>
              <label>
                <input type="radio" name="fruit" value="apples">
                <span>
                  Apples
                </span>
              </label>
            </li>
            <li>
              <label>
                <input type="radio" name="fruit" value="bananas">
                <span>
                  Bananas
                </span>
              </label>
            </li>
            <li>
              <label>
                <input type="radio" name="fruit" value="peaches">
                <span>
                  Peaches
                </span>
              </label>
            </li>
          </ul>
        </div>
  -
    id: select
    name: Select
    description: |-
      If the number of options for a field exceeds 5 items, then use a `<select>` instead.
    # notes: |-
    example:
      code: |-
        <div class="form_field">
          <select required>
            <optgroup label="A">
              <option>Apples
              <option>Aubergines
            </optgroup>
            <optgroup label="C">
              <option>Carrots
              <option>Coconuts
            </optgroup>
            <option>Other
          </select>
        </div>
  -
    id: textarea
    name: Textarea
    description: |-
      If you want to support multi-line text, then the `<textarea>` element is the correct choice.
    # notes: |-
    example:
      width: 350
      height: 100
      code: |-
        <div class="form_field">
          <textarea rows="3" cols="30" required></textarea>
        </div>